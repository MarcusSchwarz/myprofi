#!/usr/bin/env php
<?php
error_reporting(E_ALL);
ini_set('display_errors', true);

/**
 * MyProfi is mysql profiler and analizer, which outputs statistics of mostly
 * used queries by reading query log file.
 *
 * Copyright (C) 2006 camka at camka@users.sourceforge.net
 * 2016 - Marcus Schwarz <github@maswaba.de>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * @author  camka
 * @package MyProfi
 */

$autoloaderFilename = __DIR__ . '/../vendor/autoload.php';

if (!is_file($autoloaderFilename)) {
    echo 'Call composer install first!';
    die(255);
}

require_once $autoloaderFilename;

// for debug purposes
if (!isset($argv)) {
    $argv = [
        __FILE__,
//		'-slow',
        '-sort',
        'qt_total',
        '-top',
        '10',
        'queries.log',
    ];
}

$fields = [
    'qt_total',
    'qt_avg',
    'qt_max',
    'lt_total',
    'lt_avg',
    'lt_max',
    'rs_total',
    'rs_avg',
    'rs_max',
    're_total',
    're_avg',
    're_max',
];

// the last argument always must be an input filename
if (isset($argv[1])) {
    $file = array_pop($argv);
} else {
    (new \MyProfi\Helper())->doc('Error: no input file specified');
}

// get rid of program filename ($argvs[0])
array_shift($argv);

// initialize an object
$myprofi = new \MyProfi\MyProfi();

$sample = false;

$sort = false;

$html = false;

// iterating through command line options
while (null !== ($com = array_shift($argv))) {
    switch ($com) {
        case '-top':
            if (is_null($top = array_shift($argv))) {
                (new \MyProfi\Helper())->doc('Error: must specify the number of top queries to output');
            }

            if (!($top = (int)$top)) {
                (new \MyProfi\Helper())->doc('Error: top number must be integer value');
            }
            $myprofi->top($top);
            break;

        case '-type':
            if (is_null($prefx = array_shift($argv))) {
                (new \MyProfi\Helper())->doc('Error: must specify coma separated list of query types to output');
            }
            $myprofi->types($prefx);
            break;

        case '-sample':
            $myprofi->sample(true);
            $sample = true;
            break;

        case '-html':
            $html = true;
            break;

        case '-csv':
            $myprofi->csv(true);
            break;

        case '-slow':
            $myprofi->slow(true);
            break;

        case '-sort':
            if (is_null($sort = array_shift($argv))) {
                (new \MyProfi\Helper())->doc('Error: must specify criteria to sort by');
            } elseif (false === array_search($sort, $fields)) {
                (new \MyProfi\Helper())->doc('Unknown sorting field "' . $sort . '"');
            }
            $myprofi->sortby($sort);
            break;
    }
}
if (!$myprofi->slow() && $sort) {
    $sort = false;
    $myprofi->sortby(false);
}

$myprofi->setInputFile($file);
$myprofi->processQueries();

$i = $myprofi->total();
$j = 1;

$tmpl = ($html ? new \MyProfi\Template\HtmlTemplate() : new \MyProfi\Template\PlainTemplate());

$tmpl->miniheader();

foreach ($myprofi->getTypesStat() as $type => $num) {
    $tmpl->minirow($type, $num, 100 * $num / $i);
}

$tmpl->minifooter($i);

$tmpl->mainheader();

while (list($num, $query, $smpl, $stats) = $myprofi->getPatternStats()) {
    if ($sort) {
        $n = $stats[$sort];
        $tmpl->mainrow($j, $num, $n, $query, true, $smpl);
    } else {
        $tmpl->mainrow($j, $num, 100 * $num / $i, $query, false, $smpl);
    }

    $j++;
}

$tmpl->mainfooter(--$j);
